{"ast":null,"code":"var _jsxFileName = \"/home/afran/dbms-mini-project/client/src/components/PaymentPage.js\",\n  _s = $RefreshSig$();\n// src/components/PaymentPage.js\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentPage = () => {\n  _s();\n  const [amount, setAmount] = useState(0); // State to hold amount in rupees\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handlePayment = async () => {\n    setLoading(true);\n    try {\n      // Step 1: Create an order on the server\n      const response = await fetch('/api/order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amountInRupees: amount\n        })\n      });\n      const order = await response.json();\n      if (!order.id) {\n        throw new Error('Order creation failed');\n      }\n\n      // Step 2: Configure Razorpay options\n      const options = {\n        key: 'your-public-key-from-razorpay',\n        // Replace with your actual public key from Razorpay\n        amount: order.amount,\n        // Amount in paise\n        currency: order.currency,\n        name: 'Your Company Name',\n        order_id: order.id,\n        handler: async function (response) {\n          try {\n            // Step 3: Verify payment on the server\n            const verifyResponse = await fetch('/api/payment/verify', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                payment_id: response.razorpay_payment_id,\n                order_id: response.razorpay_order_id,\n                signature: response.razorpay_signature\n              })\n            });\n            const result = await verifyResponse.json();\n            if (result.success) {\n              alert('Payment successful!');\n            } else {\n              throw new Error(result.error);\n            }\n          } catch (err) {\n            setError('Payment verification failed: ' + err.message);\n          }\n          setLoading(false);\n        },\n        prefill: {\n          name: 'Your Name',\n          email: 'your-email@example.com',\n          contact: '9999999999'\n        },\n        theme: {\n          color: '#3399cc'\n        }\n      };\n      const paymentObject = new window.Razorpay(options);\n      paymentObject.open();\n    } catch (err) {\n      setError('Payment failed: ' + err.message);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Payment Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Amount (INR):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: loading,\n      children: loading ? 'Processing...' : 'Pay Now'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentPage, \"6a65mlffCCAE0rT9dOz24BMMYOs=\");\n_c = PaymentPage;\nexport default PaymentPage;\nvar _c;\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PaymentPage","_s","amount","setAmount","loading","setLoading","error","setError","handlePayment","response","fetch","method","headers","body","JSON","stringify","amountInRupees","order","json","id","Error","options","key","currency","name","order_id","handler","verifyResponse","payment_id","razorpay_payment_id","razorpay_order_id","signature","razorpay_signature","result","success","alert","err","message","prefill","email","contact","theme","color","paymentObject","window","Razorpay","open","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","required","onClick","disabled","className","_c","$RefreshReg$"],"sources":["/home/afran/dbms-mini-project/client/src/components/PaymentPage.js"],"sourcesContent":["// src/components/PaymentPage.js\n\nimport React, { useState } from 'react';\n\nconst PaymentPage = () => {\n  const [amount, setAmount] = useState(0); // State to hold amount in rupees\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handlePayment = async () => {\n    setLoading(true);\n\n    try {\n      // Step 1: Create an order on the server\n      const response = await fetch('/api/order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ amountInRupees: amount }),\n      });\n\n      const order = await response.json();\n\n      if (!order.id) {\n        throw new Error('Order creation failed');\n      }\n\n      // Step 2: Configure Razorpay options\n      const options = {\n        key: 'your-public-key-from-razorpay', // Replace with your actual public key from Razorpay\n        amount: order.amount, // Amount in paise\n        currency: order.currency,\n        name: 'Your Company Name',\n        order_id: order.id,\n        handler: async function (response) {\n          try {\n            // Step 3: Verify payment on the server\n            const verifyResponse = await fetch('/api/payment/verify', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                payment_id: response.razorpay_payment_id,\n                order_id: response.razorpay_order_id,\n                signature: response.razorpay_signature,\n              }),\n            });\n\n            const result = await verifyResponse.json();\n            if (result.success) {\n              alert('Payment successful!');\n            } else {\n              throw new Error(result.error);\n            }\n          } catch (err) {\n            setError('Payment verification failed: ' + err.message);\n          }\n          setLoading(false);\n        },\n        prefill: {\n          name: 'Your Name',\n          email: 'your-email@example.com',\n          contact: '9999999999',\n        },\n        theme: {\n          color: '#3399cc',\n        },\n      };\n\n      const paymentObject = new window.Razorpay(options);\n      paymentObject.open();\n    } catch (err) {\n      setError('Payment failed: ' + err.message);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Payment Page</h1>\n      <label>\n        Amount (INR):\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          required\n        />\n      </label>\n      <button onClick={handlePayment} disabled={loading}>\n        {loading ? 'Processing...' : 'Pay Now'}\n      </button>\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n};\n\nexport default PaymentPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}