{"ast":null,"code":"var _jsxFileName = \"/home/afran/dbms-mini-project/client/src/components/PaymentPage.js\",\n  _s = $RefreshSig$();\n// src/components/PaymentPage.js\n\nimport React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\n// Make sure to replace this with your actual public key from Stripe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('your-public-key-from-stripe');\nconst PaymentForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [amount, setAmount] = useState(0); // State to hold amount in rupees\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n    setLoading(true);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    if (error) {\n      setError(error.message);\n      setLoading(false);\n    } else {\n      // Handle payment submission to your backend\n      const response = await fetch('/api/charge', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          paymentMethodId: paymentMethod.id,\n          amountInRupees: amount // Send the amount in rupees to the server\n        })\n      });\n      const paymentResult = await response.json();\n      if (paymentResult.error) {\n        setError(paymentResult.error);\n      } else {\n        alert('Payment successful!');\n      }\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Amount (INR):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: loading || !stripe,\n      children: loading ? 'Processing...' : 'Pay Now'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentForm, \"PmJF7+OGEPTS4S0PG0jb8/pd8Hw=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = PaymentForm;\nconst PaymentPage = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Payment Page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    children: /*#__PURE__*/_jsxDEV(PaymentForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 79,\n  columnNumber: 3\n}, this);\n_c2 = PaymentPage;\nexport default PaymentPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"PaymentForm\");\n$RefreshReg$(_c2, \"PaymentPage\");","map":{"version":3,"names":["React","useState","loadStripe","Elements","CardElement","useStripe","useElements","jsxDEV","_jsxDEV","stripePromise","PaymentForm","_s","stripe","elements","loading","setLoading","error","setError","amount","setAmount","handleSubmit","event","preventDefault","paymentMethod","createPaymentMethod","type","card","getElement","message","response","fetch","method","headers","body","JSON","stringify","paymentMethodId","id","amountInRupees","paymentResult","json","alert","onSubmit","children","value","onChange","e","target","required","fileName","_jsxFileName","lineNumber","columnNumber","className","disabled","_c","PaymentPage","_c2","$RefreshReg$"],"sources":["/home/afran/dbms-mini-project/client/src/components/PaymentPage.js"],"sourcesContent":["// src/components/PaymentPage.js\n\nimport React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\n// Make sure to replace this with your actual public key from Stripe\nconst stripePromise = loadStripe('your-public-key-from-stripe');\n\nconst PaymentForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [amount, setAmount] = useState(0); // State to hold amount in rupees\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setLoading(true);\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n    });\n\n    if (error) {\n      setError(error.message);\n      setLoading(false);\n    } else {\n      // Handle payment submission to your backend\n      const response = await fetch('/api/charge', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          paymentMethodId: paymentMethod.id, \n          amountInRupees: amount // Send the amount in rupees to the server\n        }),\n      });\n\n      const paymentResult = await response.json();\n\n      if (paymentResult.error) {\n        setError(paymentResult.error);\n      } else {\n        alert('Payment successful!');\n      }\n\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Amount (INR):\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          required\n        />\n      </label>\n      <CardElement />\n      {error && <div className=\"error\">{error}</div>}\n      <button type=\"submit\" disabled={loading || !stripe}>\n        {loading ? 'Processing...' : 'Pay Now'}\n      </button>\n    </form>\n  );\n};\n\nconst PaymentPage = () => (\n  <div>\n    <h1>Payment Page</h1>\n    <Elements stripe={stripePromise}>\n      <PaymentForm />\n    </Elements>\n  </div>\n);\n\nexport default PaymentPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}